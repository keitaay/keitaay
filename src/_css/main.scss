/* define global variables */
$min_mobile: 0px;
$max_mobile: 599.99px;
$min_tablet: 600px;
$max_tablet: 999.99px;
$min_desktop: 1000px;
$alpha: 0.5;
$angGolden: 35.4deg;
$angGoRvrs: -1 * $angGolden;
$colorW: #eeeeee;
$colorWt: rgba($colorW, $alpha);
$colorX: rgb(36, 42, 52);
$colorXt: rgba($colorX, $alpha);
$color1: rgb(255, 168, 34);
$color1t: rgba($color1, $alpha);
$color2: rgb(37, 77, 108);
$color2t: rgba($color2, $alpha);
$color3: rgb(101, 180, 149);
$color3t: rgba($color3, $alpha);
$color4: rgb(214, 84, 90);
$color4t: rgba($color4, $alpha);
$color5: rgb(132, 74, 117);
$color5t: rgba($color5, $alpha);

$colorTW: #1da1f2;
$colorLI: #0073b0;
$colorOR: #a6ce39;
$colorGH: #6e5494;

/* control fonts */
$fontnames: "Noto Sans", "Verdana", "Arial", sans-serif;
$fontserif: "Noto Serif Display", serif;

/* global */
html {
  scroll-behavior: smooth;
  font-family: $fontnames;
  font-weight: 300;
  font-variation-settings: "wght" 300;
}

body {
  margin: 0;
  padding: 0;
  background-color: $colorX;
}

main {
  position: relative;
  z-index: 1;
  background-color: $colorW;
  color: $colorX;
}

a:not(.noFX):not(.tile):not(.navurl):not(.bigbutton):not(.returnToHome):not(
    .content-slideThru
  ) {
  text-decoration: none;
  color: $color1;
  background: linear-gradient(
    to right,
    transparent 50.05%,
    rgba($color4, 1) 50.05%
  );
  background-size: 201%;
  background-position: 0 0;
  transition: 500ms ease;

  &:hover,
  &:focus {
    background-position: -99% 0;
    color: $colorW;
    cursor: pointer;
  }
}

a.navurl {
  text-decoration: none;
  color: $colorW;
  background: linear-gradient(to right, transparent 50%, $colorW 50%);
  background-size: 200%;
  background-position: 0 0;
  transition: 500ms ease;

  &:hover,
  &:focus {
    background-position: -100% 0;
    color: $colorX;
  }
}

/* text sizes */
$h1Ymax: 3;
$h1Ymin: 1.5;
$hXmin: 25;
$hXmax: 90;
$h2Ymax: 2;
$h2Ymin: 1.3;
$h3Ymax: 1.5;
$h3Ymin: 1.15;

h1,
h2,
h3,
.hsub,
.htert {
  margin: 0;
  line-height: 89%;
  text-transform: none;
  font-family: $fontserif;
  font-weight: 450;
  font-variation-settings: "wght" 450;
}

h1 {
  font-size: calc(
    3rem + (#{$h1Ymax} - #{$h1Ymin}) *
      ((100vw - #{$hXmin * 1px}) / (#{$hXmax} - #{$hXmin}))
  );
}

h2,
.hsub {
  font-size: calc(
    2rem + (#{$h2Ymax} - #{$h2Ymin}) *
      ((100vw - #{$hXmin * 1px}) / (#{$hXmax} - #{$hXmin}))
  );
}

h3,
.htert {
  font-size: calc(
    1.5rem + (#{$h3Ymax} - #{$h3Ymin}) *
      ((100vw - #{$hXmin * 1px}) / (#{$hXmax} - #{$hXmin}))
  );
}

.hsub.sansserif,
.htert.sansserif {
  letter-spacing: 0.05em;
}

.sansserif {
  font-family: $fontnames;
  font-weight: 350;
  font-variation-settings: "wght" 350;
}

p {
  font-size: 1.3em;
}

/* language change */
.changeLang {
  text-decoration: none;
  font-weight: 300;
  color: $colorX;
}

/* UI: cross-component definitions */
$btnOffset: 1.4em;
$btnRadius: 0.8em;
$btnDiamtr: 2 * $btnRadius;

.UIbutton {
  cursor: pointer;
  height: $btnDiamtr;
  width: $btnDiamtr;
  border-radius: $btnRadius;
  font-size: $btnDiamtr;
  position: relative;
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  text-decoration: none;
  transition: background-color 500ms ease, color 500ms ease;

  &:hover,
  &:focus {
    background-color: darkorange;
    color: white;
  }
}

/* UI: navbar */
$navMargin: 2vw;
$navPadTop: $btnOffset + 2 * $btnRadius;
$navHeightBgn: 3em;
$navHeightExt: 2.5em;

.navOverlay {
  transition: all 1s;

  input[type="checkbox"] {
    display: none;
  }

  .navMenu {
    /* .navMenu contains the entire overlay screen for the nav menu */
    display: block;
    position: fixed;
    right: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    z-index: 700;
    opacity: 1;
    transition: visibility 200ms ease, opacity 200ms ease;
    background-color: $colorXt;
    backdrop-filter: blur(5px);

    .navWindow {
      /* .navWindows contains the actual navigation sidebar */
      display: block;
      position: fixed;
      right: 0;
      padding: $navPadTop $navMargin $navMargin $navMargin;
      height: calc(100vh - #{$navPadTop});
      width: calc(80vw - 2 * #{$navMargin});
      overflow-x: hidden;
      background-color: $colorX;
      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.6),
        0 6px 20px 0 rgba(0, 0, 0, 0.2);

      .opt,
      .navExt {
        padding: 0;
        width: 100%;
        text-decoration: none;
      }

      .opt {
        /* .opt denotes navigation options */
        display: block;
        margin: 1vh 0;
        font-size: 1.5em;
      }

      .navHead,
      .navMain,
      .navExt {
        width: calc(100% - 3 * #{$navMargin});
      }

      .navHead {
        min-height: $navHeightBgn;
      }

      .navMain {
        overflow-y: auto;
        height: calc(100% - #{$navHeightBgn} - #{$navHeightExt});
      }
    }
  }
}

.navButton,
.returnToPgtop,
.returnToHome {
  position: fixed;
  display: inline-block;
  /* "left" used to avoid shift due to scroll bar */
  left: calc(100vw - 2 * #{$btnOffset});
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
  background-color: $colorWt;
  color: $colorXt;
}

.navButton {
  top: $btnOffset;
  z-index: 900;

  .navOpen {
    display: none;
  }

  .navClosed {
    display: inline-block;
  }
}

/* UI: menu toggled off; based on workaround by Morgan Feeney, via codepen.io/morganfeeney/pen/KiBty */
/*
Uncomment this block to enable the navbar toggle menu.
input[type="checkbox"]:not(:checked) ~ .navMenu {
  visibility: hidden;
  opacity: 0;
}

input[type="checkbox"]:checked ~ .navButton {
  .navOpen {
    display: inline;
  }

  .navClosed {
    display: none;
  }
}
*/

/* UI: return to top of page */
.returnToPgtop {
  /* 
    Replace "top" with this definition if the navbar is being used; this will
    ensure that the "return to top" button is below the navbar toggle.
    top: calc(2 * #{$btnOffset} + #{$btnDiamtr});
  */
  top: $btnOffset;
  left: calc(100vw - 2 * #{$btnOffset});
  z-index: 600;
  line-height: $btnDiamtr;
  transform: rotate(-90deg); /* Correct orientation of rightward-facing arrow */
}

/* UI: return to home page */
.returnToHome {
  top: calc(2 * #{$btnOffset} + #{$btnDiamtr});
  left: calc(100vw - 2 * #{$btnOffset});
  z-index: 600;
  line-height: $btnDiamtr;
}

/* regular content: slideshow-like (keep values unitless since vanilla CSS cannot do dimensional analysis) */
ul,
ol {
  padding-inline-start: 1.5em;
}

.slide,
.content {
  position: relative;
  margin: 0;
  padding: 20vh 5vw 5vh 5vw;
  min-height: 75vh;
  scroll-snap-align: start;
  background-color: $colorW;
  background: center/cover no-repeat fixed;

  .goDown {
    font-size: 2em;
    text-align: center;
    margin: 5% 0;
    visibility: hidden;
    position: absolute;
    bottom: 0;
    left: 50vw;
    animation: bounceVert 2s infinite;

    @keyframes bounceVert {
      /* note that rotation and translation accounts for how the arrow symbol is initially pointing to the right, not downwards. */
      0%,
      20%,
      50%,
      80%,
      100% {
        transform: rotate(90deg) translateX(0);
      }

      40% {
        transform: rotate(90deg) translateX(2vh);
      }

      60% {
        transform: rotate(90deg) translateX(1vh);
      }
    }
  }

  .bigbutton {
    text-decoration: none;
    font-size: 2em;
    padding: 0.3em;
    margin: 3vh 0;
    border-radius: 5px;
    border: 1px solid $colorW;
    color: $colorX;
    background: linear-gradient(
      to right,
      rgba($color1, 1) 50.01%,
      rgba($color4, 1) 50.01%
    );
    background-size: 201%;
    background-position: 0 0;
    transition: 500ms ease;

    &:hover,
    &:focus {
      background-position: -99% 0;
      color: $colorW;
      cursor: pointer;
    }
  }

  p {
    padding-top: 2vh;
  }
}

.content {
  display: flex;
  z-index: 400;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  align-content: space-around;
  padding: 0;

  .content-section {
    width: 100%;

    .content-part {
      padding: 0 2.5%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
  }

  .content-sectionSticky {
    z-index: 600;
    top: 0;
    align-self: flex-start;
    background-color: $colorW;
  }

  .content-slideThru {
    display: flex;
    align-items: start;
    min-height: 100vh;
    color: $colorW;
    background-color: $colorX;
    background-attachment: fixed;

    .content-slideThru-text {
      padding: 1em;
      margin-top: 20vh;
      margin-bottom: 20vh;
      width: 80%;
      backdrop-filter: blur(5px) brightness(0.3);
      border-radius: 0.5em;
    }
  }

  .content-sectionNoPadMobile {
    padding: 0;
  }

  hr {
    max-width: 20em;
    margin-top: 2em;
    margin-bottom: 2em;
    text-align: center;
  }
}

.slide0 {
  background-color: #132736;
  color: $colorW;
}

/* Visual previews of portfolio entries and articles */
$tileSize: 26vw;
$tilePad: 2vw;

.tiles,
.banners {
  display: flex;
  margin: 0;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  align-content: space-around;
  align-items: flex-start;
  text-align: center;
}
.tiles {
  padding: 2em 0;
  min-height: 80vh;
}
.tile,
.banner {
  flex-grow: 0;
  flex-basis: 100vw;
  text-decoration: none;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  background: center/cover no-repeat;
  transition: all 300ms ease;
  text-align: left;

  &:hover,
  &:focus {
    transform: scale(1.02, 1.02);
  }
}
.tile {
  min-height: $tileSize;
  margin: $tilePad;
}
.banner {
  margin: calc(0.5 * $tilePad);
}

.tile-overlay,
.banner-overlay {
  margin: 0;
  padding: $tilePad;
  color: white;
  background: linear-gradient(
    0deg,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.6) 40%,
    rgba(0, 0, 0, 0.8) 100%
  );
}
.artPrelude {
  margin: 0;
  font-size: 1em;
  font-weight: 200;
  font-variant: small-caps;
}

.artTagline {
  margin: 0;
  font-size: 1.7em;
}

.artAbstract {
  font-weight: 200;
}

.buttonGoBack {
  background: $colorXt;
  border: 0.5px solid $colorW;
  color: $colorW;
  margin-bottom: 1.5em;
}

/* Articles are "full" versions of tiles. It's preceded by "summaries" that render within a "slide". */
.slide .article-summary {
  padding: 1em;
  margin: 1em;
  max-width: 1000px;
  color: $colorW;
  background-color: rgba(30, 30, 30, 0.8);

  p {
    padding: 0;
    font-size: 1.5em;
  }
}

.article {
  padding: 1em;
  margin: auto;

  h1,
  h2,
  h3 {
    margin-block: 0.5em 0.5em;
  }

  h1 {
    font-size: calc(
      1.5em + (#{$h1Ymax} - #{$h1Ymin}) *
        ((100vw - #{$hXmin * 1px}) / (#{$hXmax} - #{$hXmin}))
    );
  }

  h2 {
    font-size: calc(
      1.3em + (#{$h2Ymax} - #{$h2Ymin}) *
        ((100vw - #{$hXmin * 1px}) / (#{$hXmax} - #{$hXmin}))
    );
  }

  h3 {
    font-size: calc(
      1.15em + (#{$h2Ymax} - #{$h2Ymin}) *
        ((100vw - #{$hXmin * 1px}) / (#{$hXmax} - #{$hXmin}))
    );
  }

  pre {
    padding: 1em;
    background-color: #e0e0e0;
  }
}

/* Any of the above elements may contain additional widgets  */
.accordion {
  border-left: 0.1rem solid $colorW;
  padding-left: 0.3em;
  margin: 0.5em 0;

  .accordion-title:hover,
  .accordion-title:focus {
    cursor: pointer;
  }
}

/* Footer */
footer {
  display: flex;
  position: sticky;
  min-height: 50vh;
  width: 100%;
  bottom: 0;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  align-content: flex-start;
  align-items: flex-start;
  z-index: 0;
  color: $colorW;

  a {
    color: $colorW;
    text-decoration: none;
  }

  .footpodL,
  .footpodR {
    padding: 2em;
    min-height: 20vh;
    flex-grow: 0;
    flex-basis: 600px;
    font-size: 1.2em;
    font-weight: 300;
  }

  .copyright {
    position: absolute;
    bottom: 0;
    width: 100%;
    text-align: center;
  }
}

/* general forms, including the "contact me" form */
form {
  label {
    font-size: 0.9rem;
  }

  textarea,
  select {
    resize: none;
    font-size: 1rem;
  }

  select,
  input[type="text"],
  [type="email"] {
    font-size: 1.2rem;
  }

  input.formerror,
  textarea.formerror {
    border: 2px red solid;
  }

  label,
  input,
  textarea,
  select,
  select option {
    width: 90%;
    border: 0;
    margin: 0;
    font-family: $fontnames;
  }

  input,
  textarea,
  select {
    background-color: #f8f8f8;
  }

  button {
    font-size: 1.2rem;
    padding: 0.5em;
    border: 2px solid $color3;
    border-radius: 5px;
    background-color: $colorW;
    color: $color3;
    cursor: pointer;
    transition: all 300ms ease;
    background: linear-gradient(
      to right,
      transparent 50%,
      rgba($color3, 1) 50%
    );
    background-size: 200%;
    background-position: 0 0;
    transition: 500ms ease;

    &:hover,
    &:focus {
      background-position: -100% 0;
      color: $colorW;
    }
  }
}

/* email address obfuscation; see https://spencermortensen.com/articles/email-obfuscation/#text-display */
.email > span:nth-child(3),
.email > span:nth-child(5) {
  display: none;
}

/* responsive to variable screen sizes */
@media (orientation: landscape) and (min-width: $min_tablet) {
  .navOverlay .navMenu .navWindow {
    width: calc(400px - 2 * #{$navMargin});
  }

  .tiles .tile {
    flex-basis: $tileSize;
  }

  .article {
    width: $min_tablet;
  }

  .slide .goDown,
  .content .goDown {
    visibility: visible;
  }
}

@media (orientation: landscape) and (min-width: $min_desktop) {
  .opt {
    padding: 3vw 5vw;
    font-size: medium;
  }

  .yokoso p :not(.article-summary) {
    max-width: 50vw;
  }

  .content:has(.content-section + .content-section) .content-section {
    width: 50vw;
  }

  .content-sectionSticky {
    position: sticky;
  }

  /* the "multiple-sections" class is only injected by JavaScript if the "has" selector doesn't work */
  .content.multiple-sections .content-section {
    width: 50vw;
  }

  .content-section.content-sectionNoPadMobile {
    padding: inherit;
  }
}
